10001100000111010000000000010000 #   0: lw $29, stack($0)
10001100000111110000001111000100 #   1: lw $31, ret_table+0($0)
00001000000000000000000010111001 #   2: j main
11111100000000000000000000000000 #   3: eop
# stack: 
00000000000100000000000000000000 #   4: 0x00100000
# j_ra: 
10101100000111110000000000011000 #   5: sw $31, j_ra_return($0)
# j_ra_return: 
00010010010010001010101111001101 #   6: 0x1248abcd
# xnand: 
00100000000010110000000000000000 #   7: addi $11, $0, 0
00100000000011000000000000000000 #   8: addi $12, $0, 0
00100000000011010000000000100000 #   9: addi $13, $0, 32
00100000000110010000000000000000 #  10: addi $25, $0, 0
# xnand_loop: 
00010001011011010000000000001100 #  11: beq $11, $13, xnand_ret
00000010100000000111000000101010 #  12: slt $14, $20, $0
00000010101000000111100000101010 #  13: slt $15, $21, $0
00000001110011110111000000100000 #  14: add $14, $14, $15
00010001110101100000000000000101 #  15: beq $14, $22, xnand_write
# xnand_cont: 
00000010100101001010000000100000 #  16: add $20, $20, $20
00000010101101011010100000100000 #  17: add $21, $21, $21
00100001011010110000000000000001 #  18: addi $11, $11, 1
00100001100011000000000000000100 #  19: addi $12, $12, 4
00001000000000000000000000001011 #  20: j xnand_loop
# xnand_write: 
10001101100011100000001101000100 #  21: lw $14, xnand_tab($12)
00000011001011101100100000100000 #  22: add $25, $25, $14
00001000000000000000000000010000 #  23: j xnand_cont
# xnand_ret: 
00001000000000000000000000000101 #  24: j j_ra
# xor: 
00100000000101100000000000000001 #  25: addi $22, $0, 1
00001000000000000000000000000111 #  26: j xnand
# nand: 
# nor: 
00100000000101100000000000000000 #  27: addi $22, $0, 0
00001000000000000000000000000111 #  28: j xnand
# and: 
00100000000101100000000000000010 #  29: addi $22, $0, 2
00001000000000000000000000000111 #  30: j xnand
# srl: 
00100000000010110000000000000000 #  31: addi $11, $0, 0
00100000000011000000000000000000 #  32: addi $12, $0, 0
00100000000011010000000000000000 #  33: addi $13, $0, 0
00100000000011100000000000100000 #  34: addi $14, $0, 32
00100000000110010000000000000000 #  35: addi $25, $0, 0
# srl_pre_loop: 
00010001100101010000000000000011 #  36: beq $12, $21, srl_loop
00100001100011000000000000000001 #  37: addi $12, $12, 1
00100001101011010000000000000100 #  38: addi $13, $13, 4
00001000000000000000000000100100 #  39: j srl_pre_loop
# srl_loop: 
00010010101011100000000000001000 #  40: beq $21, $14, srl_ret
00000010100000000101100000101010 #  41: slt $11, $20, $0
00010001011000000000000000000010 #  42: beq $11, $0, srl_no_write
10001101101011110000001101000100 #  43: lw $15, xnand_tab($13)
00000011001011111100100000100000 #  44: add $25, $25, $15
# srl_no_write: 
00100001101011010000000000000100 #  45: addi $13, $13, 4
00100010101101010000000000000001 #  46: addi $21, $21, 1
00000010100101001010000000100000 #  47: add $20, $20, $20
00001000000000000000000000101000 #  48: j srl_loop
# srl_ret: 
00001000000000000000000000000101 #  49: j j_ra
# sll: 
00010010101000000000000000000011 #  50: beq $21, $0, sll_ret
00000010100101001010000000100000 #  51: add $20, $20, $20
00100010101101011111111111111111 #  52: addi $21, $21, -1
00001000000000000000000000110010 #  53: j sll
# sll_ret: 
00100010100110010000000000000000 #  54: addi $25, $20, 0
00001000000000000000000000000101 #  55: j j_ra
# lb: 
00100011101111011111111111110100 #  56: addi $29, $29, -12
10101111101111110000000000000000 #  57: sw $31, +0($29)
10101111101000010000000000000100 #  58: sw $1, +4($29)
10101111101000100000000000001000 #  59: sw $2, +8($29)
00100010100000010000000000000000 #  60: addi $1, $20, 0
10001100000101010000001100111000 #  61: lw $21, maps($0)
10001100000111110000001111001000 #  62: lw $31, ret_table+4($0)
00001000000000000000000000011101 #  63: j and
10001111001000100000000000000000 #  64: lw $2, +0($25)
10001100000101010000001100111100 #  65: lw $21, maps+4($0)
00100000001101000000000000000000 #  66: addi $20, $1, 0
10001100000111110000001111001100 #  67: lw $31, ret_table+8($0)
00001000000000000000000000011101 #  68: j and
00100000000101010000000000000000 #  69: addi $21, $0, 0
# lb_loop: 
00010000000110010000000000000011 #  70: beq $0, $25, lb_cont
00100011001110011111111111111111 #  71: addi $25, $25, -1
00100010101101010000000000001000 #  72: addi $21, $21, 8
00001000000000000000000001000110 #  73: j lb_loop
# lb_cont: 
00100000010101000000000000000000 #  74: addi $20, $2, 0
10001100000111110000001111010000 #  75: lw $31, ret_table+12($0)
00001000000000000000000000011111 #  76: j srl
10001100000101010000001101000000 #  77: lw $21, maps+8($0)
00100011001101000000000000000000 #  78: addi $20, $25, 0
10001100000111110000001111010100 #  79: lw $31, ret_table+16($0)
00001000000000000000000000011101 #  80: j and
10001111101111110000000000000000 #  81: lw $31, +0($29)
10001111101000010000000000000100 #  82: lw $1, +4($29)
10001111101000100000000000001000 #  83: lw $2, +8($29)
00100011101111010000000000001100 #  84: addi $29, $29, 12
00001000000000000000000000000101 #  85: j j_ra
# sb: 
00100011101111011111111111101000 #  86: addi $29, $29, -24
10101111101111110000000000000000 #  87: sw $31, +0($29)
10101111101000010000000000000100 #  88: sw $1, +4($29)
10101111101000100000000000001000 #  89: sw $2, +8($29)
10101111101000110000000000001100 #  90: sw $3, +12($29)
10101111101001000000000000010000 #  91: sw $4, +16($29)
10101111101001010000000000010100 #  92: sw $5, +20($29)
00100010100000010000000000000000 #  93: addi $1, $20, 0
10001100000101000000001101000000 #  94: lw $20, maps+8($0)
10001100000111110000001111011000 #  95: lw $31, ret_table+20($0)
00001000000000000000000000011101 #  96: j and
00100011001000100000000000000000 #  97: addi $2, $25, 0
10001100000101000000001100111000 #  98: lw $20, maps+0($0)
00100000001101010000000000000000 #  99: addi $21, $1, 0
10001100000111110000001111011100 # 100: lw $31, ret_table+24($0)
00001000000000000000000000011101 # 101: j and
00100011001001010000000000000000 # 102: addi $5, $25, 0
10001111001000110000000000000000 # 103: lw $3, +0($25)
10001100000101010000001100111100 # 104: lw $21, maps+4($0)
00100000001101000000000000000000 # 105: addi $20, $1, 0
10001100000111110000001111100000 # 106: lw $31, ret_table+28($0)
00001000000000000000000000011101 # 107: j and
00100000000010110000000000000000 # 108: addi $11, $0, 0
# sb_loop: 
00010011001000000000000000000011 # 109: beq $25, $0, sb_cont
00100001011010110000000000001000 # 110: addi $11, $11, 8
00100011001110011111111111111111 # 111: addi $25, $25, -1
00001000000000000000000001101101 # 112: j sb_loop
# sb_cont: 
00100001011001000000000000000000 # 113: addi $4, $11, 0
00100000010101000000000000000000 # 114: addi $20, $2, 0
00100000100101010000000000000000 # 115: addi $21, $4, 0
10001100000111110000001111100100 # 116: lw $31, ret_table+32($0)
00001000000000000000000000110010 # 117: j sll
00100011001000100000000000000000 # 118: addi $2, $25, 0
10001100000101000000001101000000 # 119: lw $20, maps+8($0)
00100000100101010000000000000000 # 120: addi $21, $4, 0
10001100000111110000001111101000 # 121: lw $31, ret_table+36($0)
00001000000000000000000000110010 # 122: j sll
00100011001101000000000000000000 # 123: addi $20, $25, 0
00100000000101010000000000000000 # 124: addi $21, $0, 0
10001100000111110000001111101100 # 125: lw $31, ret_table+40($0)
00001000000000000000000000011011 # 126: j nand
00100011001101000000000000000000 # 127: addi $20, $25, 0
00100000011101010000000000000000 # 128: addi $21, $3, 0
10001100000111110000001111110000 # 129: lw $31, ret_table+44($0)
00001000000000000000000000011101 # 130: j and
00100011001101000000000000000000 # 131: addi $20, $25, 0
00100000010101010000000000000000 # 132: addi $21, $2, 0
10001100000111110000001111110100 # 133: lw $31, ret_table+48($0)
00001000000000000000000000011001 # 134: j xor
10101100101110010000000000000000 # 135: sw $25, +0($5)
10001111101111110000000000000000 # 136: lw $31, +0($29)
10001111101000010000000000000100 # 137: lw $1, +4($29)
10001111101000100000000000001000 # 138: lw $2, +8($29)
10001111101000110000000000001100 # 139: lw $3, +12($29)
10001111101001000000000000010000 # 140: lw $4, +16($29)
10001111101001010000000000010100 # 141: lw $5, +20($29)
00100011101111010000000000011000 # 142: addi $29, $29, 24
00001000000000000000000000000101 # 143: j j_ra
# decypher: 
00100011101111011111111111101000 # 144: addi $29, $29, -24
10101111101111110000000000000000 # 145: sw $31, +0($29)
10101111101000010000000000000100 # 146: sw $1, +4($29)
10101111101000100000000000001000 # 147: sw $2, +8($29)
10101111101000110000000000001100 # 148: sw $3, +12($29)
10101111101001000000000000010000 # 149: sw $4, +16($29)
10101111101001010000000000010100 # 150: sw $5, +20($29)
00100010100000010000000000000000 # 151: addi $1, $20, 0
00100010101000100000000000000000 # 152: addi $2, $21, 0
00100000000001000000000000000000 # 153: addi $4, $0, 0
# decypher_loop: 
00100000001101000000000000000000 # 154: addi $20, $1, 0
10001100000111110000001111111000 # 155: lw $31, ret_table+52($0)
00001000000000000000000000111000 # 156: j lb
00010011001000000000000000010011 # 157: beq $25, $0, decypher_ret
00100011001000110000000000000000 # 158: addi $3, $25, 0
00000000010001001010000000100000 # 159: add $20, $2, $4
10001100000111110000001111111100 # 160: lw $31, ret_table+56($0)
00001000000000000000000000111000 # 161: j lb
00100000011101000000000000000000 # 162: addi $20, $3, 0
00100011001101010000000000000000 # 163: addi $21, $25, 0
10001100000111110000010000000000 # 164: lw $31, ret_table+60($0)
00001000000000000000000000011001 # 165: j xor
00100000001101000000000000000000 # 166: addi $20, $1, 0
00100011001101010000000000000000 # 167: addi $21, $25, 0
10001100000111110000010000000100 # 168: lw $31, ret_table+64($0)
00001000000000000000000001010110 # 169: j sb
00100000001000010000000000000001 # 170: addi $1, $1, 1
00100000000101000000000000001111 # 171: addi $20, $0, 15
00100000100101010000000000000001 # 172: addi $21, $4, 1
10001100000111110000010000001000 # 173: lw $31, ret_table+68($0)
00001000000000000000000000011101 # 174: j and
00100011001001000000000000000000 # 175: addi $4, $25, 0
00001000000000000000000010011010 # 176: j decypher_loop
# decypher_ret: 
10001111101111110000000000000000 # 177: lw $31, +0($29)
10001111101000010000000000000100 # 178: lw $1, +4($29)
10001111101000100000000000001000 # 179: lw $2, +8($29)
10001111101000110000000000001100 # 180: lw $3, +12($29)
10001111101001000000000000010000 # 181: lw $4, +16($29)
10001111101001010000000000010100 # 182: lw $5, +20($29)
00100011101111010000000000011000 # 183: addi $29, $29, 24
00001000000000000000000000000101 # 184: j j_ra
# main: 
00100011101111011111111111111100 # 185: addi $29, $29, -4
10101111101111110000000000000000 # 186: sw $31, +0($29)
00100000000101000000001100001000 # 187: la $20, string($0)
00100000000101010000001100100100 # 188: la $21, xor_key($0)
10001100000111110000010000001100 # 189: lw $31, ret_table+72($0)
00001000000000000000000010010000 # 190: j decypher
# main_ret: 
10001111101111110000000000000000 # 191: lw $31, +0($29)
00100011101111010000000000000100 # 192: addi $29, $29, 4
00001000000000000000000000000101 # 193: j j_ra
# string: 
01011001000100100101111001100100 # 194: 0x59125e64 
00010111010000100100011001010001 # 195: 0x17424651 
01000010000010110101011001010101 # 196: 0x420b5655 
00001111000101110001000000010000 # 197: 0x0f171010 
01001011000100100101011001011110 # 198: 0x4b12565e 
00000000010100100100110101010000 # 199: 0x00524d50
00000000000000000000000000000000 # 200: 0x00000000
# xor_key: 
00110011001100100011000100110000 # 201: 0x33323130 
00110111001101100011010100110100 # 202: 0x37363534 
01100010011000010011100100111000 # 203: 0x62613938 
01100110011001010110010001100011 # 204: 0x66656463
00000000000000000000000000000000 # 205: 0x00000000
# maps: 
11111111111111111111111111111100 # 206: 0xfffffffc
00000000000000000000000000000011 # 207: 0x00000003
00000000000000000000000011111111 # 208: 0x000000ff
# xnand_tab: 
10000000000000000000000000000000 # 209: 0x80000000
01000000000000000000000000000000 # 210: 0x40000000
00100000000000000000000000000000 # 211: 0x20000000
00010000000000000000000000000000 # 212: 0x10000000
00001000000000000000000000000000 # 213: 0x08000000
00000100000000000000000000000000 # 214: 0x04000000
00000010000000000000000000000000 # 215: 0x02000000
00000001000000000000000000000000 # 216: 0x01000000
00000000100000000000000000000000 # 217: 0x00800000
00000000010000000000000000000000 # 218: 0x00400000
00000000001000000000000000000000 # 219: 0x00200000
00000000000100000000000000000000 # 220: 0x00100000
00000000000010000000000000000000 # 221: 0x00080000
00000000000001000000000000000000 # 222: 0x00040000
00000000000000100000000000000000 # 223: 0x00020000
00000000000000010000000000000000 # 224: 0x00010000
00000000000000001000000000000000 # 225: 0x00008000
00000000000000000100000000000000 # 226: 0x00004000
00000000000000000010000000000000 # 227: 0x00002000
00000000000000000001000000000000 # 228: 0x00001000
00000000000000000000100000000000 # 229: 0x00000800
00000000000000000000010000000000 # 230: 0x00000400
00000000000000000000001000000000 # 231: 0x00000200
00000000000000000000000100000000 # 232: 0x00000100
00000000000000000000000010000000 # 233: 0x00000080
00000000000000000000000001000000 # 234: 0x00000040
00000000000000000000000000100000 # 235: 0x00000020
00000000000000000000000000010000 # 236: 0x00000010
00000000000000000000000000001000 # 237: 0x00000008
00000000000000000000000000000100 # 238: 0x00000004
00000000000000000000000000000010 # 239: 0x00000002
00000000000000000000000000000001 # 240: 0x00000001
# ret_table: # sadly all the return addresses need to be precalcualted
00001000000000000000000000000011
00001000000000000000000001000000
00001000000000000000000001000101
00001000000000000000000001001101
00001000000000000000000001010001
00001000000000000000000001100001
00001000000000000000000001100110
00001000000000000000000001101100
00001000000000000000000001110110
00001000000000000000000001111011
00001000000000000000000001111111
00001000000000000000000010000011
00001000000000000000000010000111
00001000000000000000000010011101
00001000000000000000000010100010
00001000000000000000000010100110
00001000000000000000000010101010
00001000000000000000000010101111
00001000000000000000000010111111
